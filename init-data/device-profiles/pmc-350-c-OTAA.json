{
  "deviceProfile": {
    "name": "PMC-350-C-OTAA",
    "macVersion": "1.0.2",
    "regParamsRevision": "B",
    "supportsJoin": true,
    "payloadCodec": "CUSTOM_JS",
    "payloadEncoderScript": "",
    "payloadDecoderScript": "function bytesToFloat(bytes) {\n    // JavaScript bitwise operators yield a 32 bits integer, not a float.\n    // Assume LSB (least significant byte first).\n    var bits = bytes[3]<<24 | bytes[2]<<16 | bytes[1]<<8 | bytes[0];\n    var sign = (bits>>>31 === 0) ? 1.0 : -1.0;\n    var e = bits>>>23 & 0xff;\n    var m = (e === 0) ? (bits & 0x7fffff)<<1 : (bits & 0x7fffff) | 0x800000;\n    var f = sign * m * Math.pow(2, e - 150);\n    return f;  \n}\n\nfunction bytesToNum(bytes) {\n    var accum = 0;\n    var shift = 0;\n    for (var i = bytes.length - 1; i >= 0; i--) {\n        accum += (bytes[i] << shift);\n        shift += 8;\n    }\n    return accum;\n}\n\nfunction bytesToLog(bytes) {\n    // double unix_timestemp = hex2Int(data.slice(0, 0+4));\n    // log.date = UtilTool.UnixTimeStampToDateTime(unix_timestemp).ToString(\"yyyy-MM-dd HH:mm:ss\");\n    value = bytesToFloat(data.slice(4, 4+4));\n    return log;\n}\n\nfunction Decode(fPort, bytes, variables) {\n\n    var payload = {};\n    switch (bytes[0]) {\n        case 0x10: // Energy and Demand\n            // payload.log_time = hex2Datetime(bytes.slice(1, 1+6)).ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.kwh_import = bytesToNum(bytes.slice(7, 7+4)) * 0.01;\n            payload.kwh_export = bytesToNum(bytes.slice(11, 11+4)) * 0.01;\n            payload.kvarh_import = bytesToNum(bytes.slice(15, 15+4)) * 0.01;\n            payload.kvarh_export = bytesToNum(bytes.slice(19, 19+4)) * 0.01;\n            payload.kvah = bytesToNum(bytes.slice(23, 23+4)) / 100;\n            payload.ia_demand = bytesToFloat(bytes.slice(27, 27+4));\n            payload.ib_demand = bytesToFloat(bytes.slice(31, 31+4));\n            payload.ic_demand = bytesToFloat(bytes.slice(35, 35+4));\n            payload.kw_demand = bytesToFloat(bytes.slice(39, 39+4)) * 0.001;\n            payload.kvar_demand = bytesToFloat(bytes.slice(43, 43+4)) * 0.00;\n            payload.kva_demand = bytesToFloat(bytes.slice(47, 47+4)) * 0.00;\n            break;\n        case 0x21: // Basic Measurement\n            // payload.log_time = hex2Datetime(bytes.slice(1, 1+6)).ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia = bytesToFloat(bytes.slice(7, 7+4));\n            payload.ib = bytesToFloat(bytes.slice(11, 11+4));\n            payload.ic = bytesToFloat(bytes.slice(15, 15+4));\n            payload.vab = bytesToFloat(bytes.slice(19, 19+4));\n            payload.vbc = bytesToFloat(bytes.slice(23, 23+4));\n            payload.vca = bytesToFloat(bytes.slice(27, 27+4));\n            payload.kw_total = bytesToFloat(bytes.slice(31, 31+4)) * 0.001;\n            payload.kvar_total = bytesToFloat(bytes.slice(35, 35+4)) * 0.001;\n            payload.kva_total = bytesToFloat(bytes.slice(39, 39+4)) * 0.001;\n            payload.frequency = bytesToFloat(bytes.slice(43, 43+4));\n            payload.pf_total = bytesToFloat(bytes.slice(47, 47+4));\n            break;\n        case \"22\": // Ir and Temperature\n            // payload.log_time = hex2Datetime(hex_arr.slice(1, 1+6)).ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ir = bytesToFloat(hex_arr.slice(7, 7+4));\n            payload.tc1 = bytesToFloat(hex_arr.slice(11, 11+4));\n            payload.tc2 = bytesToFloat(hex_arr.slice(15, 15+4));\n            payload.tc3 = bytesToFloat(hex_arr.slice(19, 19+4));\n            payload.tc4 = bytesToFloat(hex_arr.slice(23, 23+4));\n            break;\n        case \"31\": // Harmonics\n            // payload.log_time = hex2Datetime(hex_arr.slice(1, 1+6)).ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_thd = bytesToFloat(hex_arr.slice(7, 7+4));\n            payload.ib_thd = bytesToFloat(hex_arr.slice(11, 11+4));\n            payload.ic_thd = bytesToFloat(hex_arr.slice(15, 15+4));\n            payload.va_thd = bytesToFloat(hex_arr.slice(19, 19+4));\n            payload.vb_thd = bytesToFloat(hex_arr.slice(23, 23+4));\n            payload.vc_thd = bytesToFloat(hex_arr.slice(27, 27+4));\n            break;\n        case \"32\":  // Basic Power Quality Measurement\n            // payload.log_time = hex2Datetime(hex_arr.slice(1, 1+6)).ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_tdd = bytesToFloat(hex_arr.slice(7, 7+4));\n            payload.ib_tdd = bytesToFloat(hex_arr.slice(11, 11+4));\n            payload.ic_tdd = bytesToFloat(hex_arr.slice(15, 15+4));\n            payload.ia_kfactor = bytesToFloat(hex_arr.slice(19, 19+4));\n            payload.ib_kfactor = bytesToFloat(hex_arr.slice(23, 23+4));\n            payload.ic_kfactor = bytesToFloat(hex_arr.slice(27, 27+4));\n            payload.ia_crest_factor = bytesToFloat(hex_arr.slice(31, 31+4));\n            payload.ib_crest_factor = bytesToFloat(hex_arr.slice(35, 35+4));\n            payload.ic_crest_factor = bytesToFloat(hex_arr.slice(39, 39+4));\n            break;\n        case \"40\": // Peak Demand\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_max_demand = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_max_demand = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_max_demand = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.kw_max_demand = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.kvar_max_demand = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.kva_max_demand = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        case \"51\": // Max. Current/Voltage\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_max = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_max = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_max = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.kw_max = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.kvar_max = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.kva_max = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        case \"52\": // Min. Current/Voltage\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_min = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_min = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_min = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.kw_min = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.kvar_min = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.kva_min = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        case \"53\": // Max. Power/Frequency/PF\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.kw_max = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.kvar_max = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.kva_max = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.frequency_max = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.pf_total_max = bytesToLog(hex_arr.slice(33, 33+8));\n            break;\n        case \"54\": // Min. Power/Frequency/PF\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.kw_min = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.kvar_min = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.kva_min = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.frequency_min = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.pf_total_min = bytesToLog(hex_arr.slice(33, 33+8));\n            break;\n        case \"55\": // Max. Ir/Temperature\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ir_max = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.tc1_max = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.tc2_max = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.tc3_max = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.tc4_max = bytesToLog(hex_arr.slice(33, 33+8));\n            break;\n        case \"56\": // Min. Ir/Temperature\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ir_min = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.tc1_min = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.tc2_min = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.tc3_min = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.tc4_min = bytesToLog(hex_arr.slice(33, 33+8));\n            break;\n        case \"61\": // Max. Harmonic\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_thd_max = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_thd_max = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_thd_max = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.va_thd_max = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.vb_thd_max = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.vc_thd_max = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        case \"62\": // Min. Harmonic\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_thd_min = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_thd_min = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_thd_min = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.va_thd_min = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.vb_thd_min = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.vc_thd_min = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        case \"63\": // Max. Current TDD\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_tdd_max = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_tdd_max = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_tdd_max = bytesToLog(hex_arr.slice(17, 17+8));\n            break;\n        case \"64\": // Min. Current TDD\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_tdd_min = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_tdd_min = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_tdd_min = bytesToLog(hex_arr.slice(17, 17+8));\n            break;\n        case \"65\": // Max. K-factor/Crest Factor\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_kfactor_max = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_kfactor_max = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_kfactor_max = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.ia_crest_factor_max = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.ib_crest_factor_max = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.ic_crest_factor_max = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        case \"66\": // Min. K-factor/Crest Factor\n            // payload.log_time = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\n            payload.ia_kfactor_min = bytesToLog(hex_arr.slice(1, 1+8));\n            payload.ib_kfactor_min = bytesToLog(hex_arr.slice(9, 9+8));\n            payload.ic_kfactor_min = bytesToLog(hex_arr.slice(17, 17+8));\n            payload.ia_crest_factor_min = bytesToLog(hex_arr.slice(25, 25+8));\n            payload.ib_crest_factor_min = bytesToLog(hex_arr.slice(33, 33+8));\n            payload.ic_crest_factor_min = bytesToLog(hex_arr.slice(41, 41+8));\n            break;\n        default:\n            payload.error = \"Unsupported payload type: \" + bytes[0];\n            break;\n    }\n    return payload;\n}"
  }
}