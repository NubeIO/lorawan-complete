{
    "deviceProfile": {
        "name": "MS-VS121-OTAA",
        "macVersion": "1.0.3",
        "regParamsRevision": "B",
        "supportsJoin": true,
        "payloadCodec": "CUSTOM_JS",
        "payloadEncoderScript": "",
        "payloadDecoderScript": "/**\n * Payload Decoder for Chirpstack and Milesight network server\n *\n * Copyright 2020 Milesight IoT\n *\n * @product VS121\n */\nfunction Decode(fPort, bytes) {\n    var decoded = {};\n\n    for (i = 0; i < bytes.length; ) {\n        var channel_id = bytes[i++];\n        var channel_type = bytes[i++];\n\n        // PROTOCOL VESION\n        if (channel_id === 0xff && channel_type === 0x01) {\n            decoded.protocol_version = bytes[i];\n            i += 1;\n        }\n        // SERIAL NUMBER\n        else if (channel_id === 0xff && channel_type === 0x08) {\n            decoded.sn = readString(bytes.slice(i, i + 6));\n            i += 6;\n        }\n        // HARDWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x09) {\n            decoded.hardware_version = readVersion(bytes.slice(i, i + 2));\n            i += 2;\n        }\n        // FIRMWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x0a) {\n            decoded.firmware_version = readVersion(bytes.slice(i, i + 4));\n            i += 4;\n        }\n        // PEOPLE COUNTER\n        else if (channel_id === 0x04 && channel_type === 0xc9) {\n            decoded.people_counter_all = bytes[i];\n            decoded.region_count = bytes[i + 1];\n            var region = readUInt16BE(bytes.slice(i + 2, i + 4));\n            for (var idx = 0; idx < decoded.region_count; idx++) {\n                var tmp = \"region_\" + idx;\n                decoded[tmp] = (region >> idx) & 1;\n            }\n            i += 4;\n        } \n        // PEOPLE IN/OUT\n        else if (channel_id ===0x05 && channel_type === 0xcc) {\n            decoded.in = readInt16LE(bytes.slice(i, i + 2));\n            decoded.out = readInt16LE(bytes.slice(i + 2, i + 4));\n            i += 4;\n        } \n        //PEOPLE MAX\n        else if (channel_id ===0x06 && channel_type === 0xcd) {\n            decoded.people_max = bytes[i];\n            i += 1;\n        } else {\n            break;\n        }\n    }\n\n    return decoded;\n}\n\n// bytes to number\nfunction readUInt16BE(bytes) {\n    var value = (bytes[0] << 8) + bytes[1];\n    return value & 0xffff;\n}\n\nfunction readInt16LE(bytes) {\n    var ref = readUInt16LE(bytes);\n    return ref > 0x7fff ? ref - 0x10000 : ref;\n}\n\nfunction readUInt16LE(bytes) {\n    var value = (bytes[1] << 8) + bytes[0];\n    return value & 0xffff;\n}\n\n// bytes to version\nfunction readVersion(bytes) {\n    var temp = [];\n    for (var idx = 0; idx < bytes.length; idx++) {\n        temp.push((bytes[idx] & 0xff).toString(10));\n    }\n    return temp.join(\".\");\n}\n\n// bytes to string\nfunction readString(bytes) {\n    var temp = [];\n    for (var idx = 0; idx < bytes.length; idx++) {\n        temp.push((\"0\" + (bytes[idx] & 0xff).toString(16)).slice(-2));\n    }\n    return temp.join(\"\");\n}"
    }
}
